import { expect } from "chai";
import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

describe("verified counter", function () {
  it("updates the counter if the proof is valid", async function () {
  
    const UltraVerifier = await ethers.getContractFactory("UltraVerifier");
    const verifier = await UltraVerifier.deploy();
    const verifierAddress = await verifier.getAddress();
    const SimpleCounter = await ethers.getContractFactory("SimpleCounter");
    const counter = await SimpleCounter.deploy(verifierAddress);
    const initialCounter = await counter.counter();
    // this proofHex is copied & pasted from a file we generated earlier with  noirjs
    const proofHex = "0x0cefbba1d1bf041c4af907e43349031ca3b99cf118044937bc338b2f469ae4521277835bff2ba42d0831eec570bf2d8c2596f4b7880f828bf5996bd0441a49952f78ab76f65eeb154dfed5b95911bfc67b0bd8ddfa0826464794900ea2d634e12f524d2bf1404ab8a03371b258c907c7d32acef745ae599a25eda85da87e55b712b487c451b90fa5737b1623f5e691f21a839e1c2915f527caca6139cdc89869287d160323d8b2c073e6046bd51712f08101c6024b1ca843b84628c6517b3e45252dc5b2fd549df5685709720b4d71976d4d4b16208a4761bff194f0ba2391e004eb0baea25af026b614fed72c0153387c162e612d505a0f08377ed8aff5f1b90efca4935a7b87f35423b3bef5485002b2856a1f44969d6828dbfcd1336099a614ec0af883df724e3069f54df8570e9b5e5ad95228f5cbf19ebf3765e51a81612021104f1c16584d5bba3bdc182be6b3f3a968e0bd925ef4ecc38a87779166db2318c9cd554b82a5201eff43fac10e34cbaf46a4a57ec14dca4ff02bd8c6da8e1b3f105d1ccdc9083b22efe3160e149c7bff9c7a89a50bce22d15b5793166e0f1a23b877e8ac7049fb4c07b272b555dd8381468764ec4664ae0c2aa0d4ffc84c01c7ad2d0b2a097cb3b951f3e7018f235f3e22de03ad3c38d233c66bd7d0c0bf1fff34a6ebcb8b994e2a173912c180fdf3b32a4783c3ebf46f1850e0de7ec29c2a0cff4ad7c98c18f7e866a19cf86f5494c9be7f45ed8ab7dfddcaeb8df0c18d25b6e7d2c0842acab30e7119b889a77c7cecae17fcca6ddaed4a19332e74d43e09d18abab15554101f3d9810259a0ef9dad78cbb7d0bd9f8dc1e27ceef3c98980465056e03ed965dee10bfa9d55444f903a9d3212cde982b82f4eec43cbf124c1fea94ab081451b27c9d27a0c452f43f0361e576fdda3bd1a3ccfc87ef7f3ae515715c7fe7deedd3fbee34147e13ca8603e6b3bd42d02e9624291f858354bcbf14bc492d854acf47cc7f9bf6173e883022bc7de29f007e90139a8a5836c795562f404da19922eb54f6ebbba9a18d530f00e3071c0d2915ea790f241fb4d246ca0464e37b687fc88880cfac65b987fd3372c8c01d56a34ad110dfcdbd932987251432c00d9450d68400b902273abd3c211da91d6f78a2a156acefba0e33e43f651f6837768d7882f2a5ef6fc82ec073f23fa96a0dcd00be4875d378d073dd0069096e3fb4ba2713b17f6469f4f2d7de2cd98f0805511da7bb69b67ec730fd88e7291511205af61d73d9da06e5f3d9721ca806245d7d7359229b8a9a625cfb90c41db02fc49c0c0b27c8e08dcbb37407078a1e156222131954684deade525e545c0cbb9c3b0faf2ad517797a982bb92cfc7400ac1a17734721c34aa4abf45bb2e10281a7661930e04af0a5734474a8c53ab7f22e1bc78dc5ed54b3cfbe86c6a669011a5003f3fb0f9733aa36ea462501f5f057126418a88dcef287f8acca583de021b06434085dbe6e60538e79030065be18a037d7e449590449e965a6fd83de79130b2e0801e2a6e651794ff5368d76f47ccf625c9f5a41f7d1e6cc8a427f6d7c07455c56abcedca779e8c4d6fb9b072baa2092f755d6ced2fd8d5c0155500fb021bb49a730c52a3abfc3225cb3dce830b096b3607207081f70a1449e5875a7d601a77805edf89762cd7f525f693782f0e8829b9624fcd4b66bcbf5032f845cd011f7f4d78c5da4b4938bc818a013760e48a26c1451ac11deaad89afbf69311cb0c0b2bde61492823dc6483367ad99f5c110e413cfd318ad8b27661fa4b0d70de2180f82203ce5c6e1b9eece7d7cf547702b5c22ef28360759dd25a0b0facd4780edbee11352f9184b317da1f0e3d3fa4d32414ae01fc7ed012d3500d5897e9580310b76ef243a4aa62175ceed82dde5e79e0a08e2b9e1394c949106946661c1b0234a007e7f61f2e67546dd48c4a03ebe0ae24c831511b9de50ff15994b07bc012851cd9865b2c802d60e38dc325f70940cdf5465e0058c6241c97525bbf30bb22d599ab24c039d1f36d5946fa01ea26a0edc5c48aaf95ee63293d4b22cde5b602c1c809e1f3a6fa01298949af5c84e6d8d9adfa3da562855e53edaff9dc9ab0224871a92ac2b20659983dd1d6ef692ba8c23c927e5b4f06e9e540f4bda1c6c62973882701e10ed24460958b8f008868714afcc5831fe8f2177104979c6f6a1302ed23930a8ece43f2cb2a72e4672bb6bfb36555067d7b1b7983d8a644930b362f6b88a33f43f805cdc3c222182e36eddc7b3eea9994565fea44ae33b2c9e8dd005d6e819036e80e777ff44a770406900331c89548c51ef9c1c24928227bc4bd2a58064eee26e61d81d98a27ed6490d105d26d51a4b6e8fb06483f1a76a1e4f41db4b452eefd94a681d188ec651a4fb5a12f5849776599c0d3ffa29b6af5358f292de17a7a32088787bd74e0497ab76060f1fca573a03d3180c8395b717416900ba92b7cd2247ea5e47ecbf97dc12e944d9aa38521f4e3e3ef1ef337dffd772a1f22eb586a62d41b6413f4d2020ebb021ab4a3a3e635922e00a68a902fa53fe02c4d7173efee69a5890d3a334f768e0679c33bc6b35f53fe95c13995d8f4e7171ebc7f2ec2a4a6713621997c9cd6c315cb84a8f64b3e964297efdde65b8d4f0c22ff2f5876797e98d30caa72d2d589c6bfd384a3a4f170370485764a7f33699309af45877cfc010d391ee551ee31370ba306dd8701040d3c32a21b8fbdcd07b420c3aa2964b023ab578165e78b0e3cadae6e1eb2d6d01ad2a4a0b668ec66a5d60773c0586b32a61fbd93a0c6a669e9f291a1779632e2b7d7d2bd5bae2b0043f706b3ea046ecc1fab5ab15d3e78535c34c9b7aa0f23f83a7fadda5595ce48493c05e4ba36fec6404efaac54501e4fe7e6e95c2d1f7146ceb8f24e5a51436ac5d40b5741cf3176e0a8784d92db8ebbf41a79dfe7532826b1b1bdaec1ff03e8d9cc229a8c64c91c913a2e904ba69dbe94421083413e3a0af174e08daf0f8f1375e0";
    const publicInputs = ["0x0000000000000000000000000000000000000000000000000000000000000002"];

    const tx = await counter.updateCounterIfVerified(
      proofHex,
      publicInputs
    );
    await tx.wait(); 

    const finalCounter = await counter.counter();
    const counterDifference = finalCounter - initialCounter;
    expect(counterDifference).to.equal(1n); 
    console.log("Test completed successfully");
  });
});
