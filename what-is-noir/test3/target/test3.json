{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":14435191604146979745,"abi":{"parameters":[{"name":"num","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71XTU7zMBCd/EFD1Y9PINZIiBUb7MZunF0XcBCXJufokgNwCE7ChgVXohEzZDpNC1IcRrLGjsfP854nThvBlyXbdor9CMcRjpfblrI5aTyuNTXMdEAsxfONJbmYbRSaRIz4ErdQC2Pqcl7rQns1r1bOKmNXC6edts6u564oamdcWa2qUlXaFLVubFU0CJwEFidhmixh1+LAuYfUN6QOxzirYaajgPrFgc/+Ny91JOZpzfvLx9vrs1/LeIc+F3rKGlPDTOc9eYbCd8osctjXI2D+RQ7dHTSWPoQ5Ar6ij8XDpsOXXIB5ipNr2nqawX6dUcxk2/5B1z/H/gz9I8Oi9WNqu60NO7K2+hIO6zlFHe4FV55LCmHvL35XAPa53nL/tmU4PjkQT3iZiL9C33K0f8NxLnNOWM5pD8cZ7GsSHfAg8iajs/3fs08meGcih2UY3orwT8bB/76DTsfB93QOcY92Ladr9pzPZbD7GxBEnrImbxnmDfbP4XBNT9l81jNP6yY45vUW9XCh5/yblPbETET8Gcu7Lz4XfCn+Dj1/B4+9I/xbTLV+rK4lFuHJ86C6/O05Ux7pZjefJT5XA6x03Z+JZNPplsC+pWyexxscnzEe5IfcZ03pdVP4xlu/XpsnfyHwgWk3HWF/Y3355EutK6Nro+1P+38CmpJeB3UOAAA=","debug_symbols":"ldTbasQgEAbgd/E6FzrjmMOrlLLk4C5CSEIOhRLy7tUFS9daylxO5HPMHzOnGGx3PG5uus+baN5OMc59u7t58tUp1PPRtrRTqLa9XXfRqBoLYadBNCDhKsTdjVY0Bq73QgAXYA6AMhFAmQDNBfQPQP0CfNGtbhzd4/YShXzmYXKboY6bIZmkuyrZomKLmitAsoXKC4rCqFQAWyBbaLYgrsD8m1cyiurXnc6eimRMlxBTYdg9sveKvq81QZWKKn+q8m9Rc4WWbKHYArjpamQL5he8fPXRrq7tRhumRVg8pj4OD1/un0tcieNlWefeDsdqw6D5MWNChrosCMKvHeIhLIh8D9/nCw==","file_map":{"62":{"source":"//  for i in 0..5 {\n//        std::println(i);\n//    }\n\nfn main(num: u64) -> pub u64 {\n    // Safety: We are using an unconstrained function to calculate the square root\n    let sqrt = unsafe {sqrt(num)};\n    assert(sqrt * sqrt == num);\n\n    sqrt\n}\n\nunconstrained fn sqrt(num: u64) -> u64 {\n    let mut approx = num;\n    let mut better_approx = (approx + 1) / 2;\n\n    for _ in 0..10 { \n        approx = better_approx;\n        // if (approx==69) {\n        //     break;\n        // }\n        better_approx = (approx + num / approx) / 2;\n    }\n\n    better_approx\n}\n\n#[test]\nfn test_main() {\n    let number_to_square_root: u64 = 144; \n    let square_root = main(number_to_square_root);\n    assert(square_root == 12);\n}\n","path":"/Users/raigal/tmp/Projects/Noir/what-is-noir/test3/src/main.nr"}},"names":["main"],"brillig_names":["sqrt"]}